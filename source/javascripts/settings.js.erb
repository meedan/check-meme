// Handle stamp syntax like this, 
// so users don't have to type the full image name or path.
// 
//   http://memebuster.dev/?imageStamp=fake
//   
if (queries.imageStamp) {
  var imageStampPath = "images/" + queries.imageStamp + ".png";
}

// Default settings
// 
var MEME_SETTINGS = {
  creditText: 'http://example.checkdesk.org', // Default "credits" text.
  creditSize: 20, // Font size for credit text.
  downloadName: 'Antiviral Meme', // The name of the downloaded image file (will have a ".png" extension added).
  fontColor: 'white', // Universal font color.

  // Universal font family for texts:
  // Note that you'll need to included quoted font names as you would in CSS, ie: '"Knockout 28 B"'.
  fontFamily: 'Arial',
  // Font family options: set to empty array to disable font selector.
  // These options may also be formatted as {text:'Knockout', value:'"Knockout 28 B"'}.
  fontFamilyOpts: ['Arial', 'Futura', 'Helvetica Neue'],
  
  // Font size of main headline:
  fontSize: 36,
  // Font size options: set to empty array to disable font-size selector.
  fontSizeOpts: [
    {text: 'Small text', value: 14},
    {text: 'Medium text', value: 24},
    {text: 'Large text', value: 36},
    {text: 'X-Large text', value: 50}
  ],

  headlineText: 'No, this didn\'t actually happen', // Default headline text.
  height: 600, // Canvas rendering height.
  imageScale: 1, // Background image scale.
  imageSrc: queries.imageBackground , // Default background image path. MUST reside on host domain, or use base64 data.
  overlayAlpha: 0.5, // Opacity of image overlay.

  // Image overlay color, or blank ('') for no overlay:
  overlayColor: '#10212f',
  // Overlay color options: set to empty array to disable overlay options selector.
  overlayColorOpts: ['#10212f', '#000', '#FEC509', '#78FF62'],
  paddingRatio: 0.05, // Percentage of canvas width to use as edge padding.
  
  // Text alignment: valid settings are "left", "center", and "right".
  textAlign: 'left',
  // Text alignment options: set to empty array to disable alignment picker.
  textAlignOpts: [
    {text: 'Align left', value: 'left'}, 
    {text: 'Align center', value: 'center'},
    {text: 'Align right', value: 'right'}
  ],

  textShadow: false, // Text shadow toggle.
  textShadowEdit: true, // Toggles text shadow control within the editor.
  watermarkAlpha: 1, // Opacity of watermark image.
  watermarkMaxWidthRatio: 0.3, // Maximum allowed width of watermark (percentage of total canvas width).

  // Path to the watermark image source, or blank for no watermark:
  // Alternatively, use '<%= asset_data_uri("fake.png") %>' to populate the watermark with base64 data, avoiding Cross-Origin issues.
  watermarkSrc: (localStorage && localStorage.getItem('meme_watermark')) || '<%= image_path("warning@2x.png") %>',
  
  // WIP — trying to set the watermark optionally from the querystring CGB 2015 Dec 15
  // 
  // watermarkSrc: imageStampPath || (localStorage && localStorage.getItem('meme_watermark')),
  
  // Watermark image options: set to empty array to disable watermark picker.
  // NOTE: only populate the "data" attributes with base64 data when concerned about Cross-Origin requests...
  // Otherwise, just leave "data" attributes blank and allow images to load from your server.
  // 
  watermarkOpts: [
    {text: 'Real', value: '<%= image_path("real@2x.png") %>', data: '<%= asset_data_uri("real@2x.png") %>'},
    {text: 'Fake', value: '<%= image_path("fake@2x.png") %>', data: '<%= asset_data_uri("fake@2x.png") %>'},
    {text: 'Unknown', value: '<%= image_path("unknown@2x.png") %>', data: '<%= asset_data_uri("unknown@2x.png") %>'},
    {text: 'Warning', value: '<%= image_path("warning@2x.png") %>', data: '<%= asset_data_uri("warning@2x.png") %>'}
  ],

  width: 1200 // Canvas rendering width.
};