
// Read the query string to get the params from hubot
// 
var queries = {};
$.each(document.location.search.substr(1).split('&'),function(c,q){
  var i = q.split('=');
  queries[i[0].toString()] = i[1].toString();
});
console.log(queries);

var link = queries['queryLink'];
var image = queries['queryImageBackground'];
var stamp = queries['queryImageStamp'];
var headline = queries['queryHeadline'];
var credit = queries['queryCredit'];

// Build the default meme settings
var MEME_SETTINGS = {
  creditText: headline || 'Checked by our team', // Default "credits" text.
  creditSize: 12, // Font size for credit text.
  downloadName: 'Debunk', // The name of the downloaded image file (will have a ".png" extension added).
  fontColor: 'white', // Universal font color.

  // Universal font family for texts:
  // Note that you'll need to included quoted font names as you would in CSS, ie: '"Knockout 28 B"'.
  fontFamily: 'Futura',
  // Font family options: set to empty array to disable font selector.
  // These options may also be formatted as {text:'Knockout', value:'"Knockout 28 B"'}.
  fontFamilyOpts: ['Futura', 'Arial', 'Helvetica Neue'],
  
  // Font size of main headline:
  fontSize: 24,
  // Font size options: set to empty array to disable font-size selector.
  fontSizeOpts: [
    {text: 'Small text', value: 14},
    {text: 'Medium text', value: 24},
    {text: 'Large text', value: 36}
  ],

  headlineText: 'No, this didn\'t actually happen', // Default headline text.
  height: 378, // Canvas rendering height.
  imageScale: 1, // Background image scale.
  imageSrc: image, // Default background image path. MUST reside on host domain, or use base64 data.
  overlayAlpha: 0.5, // Opacity of image overlay.

  // Image overlay color, or blank ('') for no overlay:
  overlayColor: '#000',
  // Overlay color options: set to empty array to disable overlay options selector.
  overlayColorOpts: ['#000', '#D00A1B', '#FEC509', '#78FF62', '#14A7FF'],
  paddingRatio: 0.05, // Percentage of canvas width to use as edge padding.
  
  // Text alignment: valid settings are "left", "center", and "right".
  textAlign: 'left',
  // Text alignment options: set to empty array to disable alignment picker.
  textAlignOpts: [
    {text: 'Align left', value: 'left'}, 
    {text: 'Align center', value: 'center'},
    {text: 'Align right', value: 'right'}
  ],

  textShadow: false, // Text shadow toggle.
  textShadowEdit: true, // Toggles text shadow control within the editor.
  watermarkAlpha: 1, // Opacity of watermark image.
  watermarkMaxWidthRatio: 0.25, // Maximum allowed width of watermark (percentage of total canvas width).

  // Path to the watermark image source, or blank for no watermark:
  // Alternatively, use '<%= asset_data_uri("fake.png") %>' to populate the watermark with base64 data, avoiding Cross-Origin issues.
  // watermarkSrc: (localStorage && localStorage.getItem('meme_watermark')) || '<%= image_path("warning.png") %>',
  watermarkSrc: (localStorage && localStorage.getItem('meme_watermark')) || stamp,
  
  // Watermark image options: set to empty array to disable watermark picker.
  // NOTE: only populate the "data" attributes with base64 data when concerned about Cross-Origin requests...
  // Otherwise, just leave "data" attributes blank and allow images to load from your server.
  watermarkOpts: [
    {text: 'Real', value: '<%= image_path("real.png") %>', data: '<%= asset_data_uri("real.png") %>'},
    {text: 'Fake', value: '<%= image_path("fake.png") %>', data: '<%= asset_data_uri("fake.png") %>'},
    {text: 'Misleading', value: '<%= image_path("misleading.png") %>', data: '<%= asset_data_uri("misleading.png") %>'},
    {text: 'Warning', value: '<%= image_path("warning.png") %>', data: '<%= asset_data_uri("warning.png") %>'}
  ],

  width: 755 // Canvas rendering width.
};